{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Multi-Agent Generator","text":"<p>\ud83d\ude80 Multi-Agent Generator is a tool that transforms plain English instructions into fully configured multi-agent AI teams. No scripting. No complexity. Just describe what you want, and let it build the agents.</p> <p>Frameworks supported: CrewAI, CrewAI Flow, LangGraph, ReAct (Classic + LCEL). LLM providers supported: Any provider via LiteLLM (OpenAI, IBM WatsonX, Ollama, Anthropic, etc.).</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>Generate multi-agent workflows in multiple frameworks</li> <li>Provider-agnostic (LiteLLM under the hood)</li> <li>Streamlit-based UI for interactive generation</li> <li>CLI tool for quick workflows</li> <li>JSON + code output formats</li> <li>Extensible agent/task configuration</li> </ul>"},{"location":"#quick-links","title":"\ud83d\udd17 Quick Links","text":"<ul> <li>Installation</li> <li>Usage</li> <li>Frameworks</li> <li>Examples</li> <li>Development Guide</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#research-assistant","title":"Research Assistant","text":"<pre><code>I need a research assistant that summarizes papers and answers questions\n</code></pre>"},{"location":"examples/#content-creation-team","title":"Content Creation Team","text":"<pre><code>I need a team to create viral social media content and manage our brand presence\n</code></pre>"},{"location":"examples/#customer-support-langgraph","title":"Customer Support (LangGraph)","text":"<pre><code>Build me a LangGraph workflow for customer support\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#basic-installation","title":"Basic Installation","text":"<pre><code>pip install multi-agent-generator\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<pre><code>pip install multi-agent-generator[dev]\n</code></pre>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>At least one supported LLM provider (OpenAI, WatsonX, Ollama, etc.)</li> <li> <p>Environment variables setup:</p> </li> <li> <p><code>OPENAI_API_KEY</code> (for OpenAI)</p> </li> <li><code>WATSONX_API_KEY</code>, <code>WATSONX_PROJECT_ID</code>, <code>WATSONX_URL</code> (for WatsonX)</li> <li><code>OLLAMA_URL</code> (for Ollama)</li> <li>Or a generic <code>API_KEY</code> / <code>API_BASE</code> if supported by LiteLLM</li> </ul> <p>\u26a1 You can freely switch providers using <code>--provider</code> in CLI or by setting environment variables.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#cli","title":"CLI","text":"<p>Basic usage:</p> <pre><code>multi-agent-generator \"I need a research assistant that summarizes papers and answers questions\" --framework crewai\n</code></pre> <p>Using WatsonX instead:</p> <pre><code>multi-agent-generator \"I need a research assistant that summarizes papers and answers questions\" --framework crewai --provider watsonx\n</code></pre> <p>Using Ollama locally:</p> <pre><code>multi-agent-generator \"Build me a ReAct assistant for customer support\" --framework react-lcel --provider ollama\n</code></pre> <p>Save output to a file:</p> <pre><code>multi-agent-generator \"I need a team to create viral social media content\" --framework langgraph --output social_team.py\n</code></pre> <p>Get JSON configuration only:</p> <pre><code>multi-agent-generator \"I need a team to analyze customer data\" --framework react --format json\n</code></pre>"},{"location":"frameworks/crewai-flow/","title":"CrewAI Flow","text":"<p>CrewAI Flow extends CrewAI with event-driven workflows. It enables sequential, parallel, and conditional task execution with state management.</p>"},{"location":"frameworks/crewai-flow/#example","title":"Example","text":"<pre><code>multi-agent-generator \"Analyze customer reviews and generate insights\" --framework crewai-flow\n</code></pre>"},{"location":"frameworks/crewai-flow/#this-produces","title":"This produces:","text":"<ul> <li> <p>Specialized agents (e.g., Data Collector, Data Analyst, Writer)</p> </li> <li> <p>Sequential flow: collect \u2192 analyze \u2192 summarize</p> </li> <li> <p>Task delegation and transitions defined</p> </li> </ul>"},{"location":"frameworks/crewai/","title":"CrewAI Framework","text":"<p>CrewAI orchestrates role-playing autonomous AI agents. Each agent has:</p> <ul> <li>Role: what they do</li> <li>Goal: their objective</li> <li>Backstory: context</li> <li>Tools: available abilities</li> </ul> <p>Tasks are assigned to agents with expected outputs.</p>"},{"location":"frameworks/crewai/#example","title":"Example","text":"<pre><code>multi-agent-generator \"Research AI trends and write a summary\" --framework crewai\n</code></pre>"},{"location":"frameworks/crewai/#produces-agents-like","title":"Produces agents like:","text":"<pre><code>{\n  \"agents\": [\n    {\n      \"name\": \"research_specialist\",\n      \"role\": \"Research Specialist\",\n      \"goal\": \"Gather AI research trends\",\n      \"tools\": [\"search_tool\"]\n    },\n    {\n      \"name\": \"writer\",\n      \"role\": \"Content Writer\",\n      \"goal\": \"Write a summary\",\n      \"tools\": [\"editor_tool\"]\n    }\n  ],\n  \"tasks\": [...]\n}\n</code></pre>"},{"location":"frameworks/langgraph/","title":"LangGraph Framework","text":"<p>LangGraph is LangChain's framework for stateful, multi-actor applications. It represents workflows as directed graphs with:</p> <ul> <li>Nodes: agents, tools, or operations</li> <li>Edges: control/data flow</li> <li>Conditions: define branching behavior</li> </ul>"},{"location":"frameworks/langgraph/#example","title":"Example","text":"<pre><code>multi-agent-generator \"Build me a LangGraph workflow for customer support\" --framework langgraph\n</code></pre>"},{"location":"frameworks/langgraph/#generates-a-graph-like","title":"Generates a graph like:","text":"<pre><code>{\n  \"agents\": [{ \"name\": \"support_agent\", \"llm\": \"gpt-4.1-mini\" }],\n  \"nodes\": [\n    { \"name\": \"greet_customer\", \"agent\": \"support_agent\" },\n    { \"name\": \"resolve_issue\", \"agent\": \"support_agent\" }\n  ],\n  \"edges\": [\n    { \"source\": \"greet_customer\", \"target\": \"resolve_issue\" }\n  ]\n}\n</code></pre>"},{"location":"frameworks/react-lcel/","title":"ReAct (LCEL)","text":"<p>ReAct (Reasoning + Acting) with LangChain Expression Language (LCEL). Supports multi-step reasoning, tool usage, and history tracking.</p>"},{"location":"frameworks/react-lcel/#example","title":"Example","text":"<pre><code>multi-agent-generator \"Find AI papers and summarize them\" --framework react-lcel\n</code></pre>"},{"location":"frameworks/react-lcel/#generated-agent-includes","title":"Generated agent includes:","text":"<ul> <li> <p>Multi-step reasoning traces</p> </li> <li> <p>Tool calls with inputs/outputs</p> </li> <li> <p>LangChain Expression Language chain</p> </li> </ul>"},{"location":"frameworks/react-lcel/#example-snippet","title":"Example Snippet","text":"<pre><code>chain = (\n    {\"input\": RunnablePassthrough(), \"history\": RunnablePassthrough()}\n    | react_prompt\n    | llm\n    | StrOutputParser()\n)\n</code></pre>"},{"location":"frameworks/react/","title":"ReAct (Classic)","text":"<p>ReAct (Reasoning + Acting) combines thoughts + actions. The agent reasons about a problem, then decides when to call a tool.</p>"},{"location":"frameworks/react/#example","title":"Example","text":"<pre><code>multi-agent-generator \"Answer math questions using a calculator tool\" --framework react\n</code></pre>"},{"location":"frameworks/react/#produces","title":"Produces:","text":"<ul> <li> <p>An agent with reasoning + acting steps</p> </li> <li> <p>Tool definitions with parameters</p> </li> <li> <p>ReAct-style execution loop</p> </li> </ul>"}]}